<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>vr0px | Blog</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/7.0.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Fira+Code:wght@300;400;500;700&family=Inter:wght@300;400;500;600;700&display=swap');
        
        /* Cursor personalizado */
        html {
            cursor: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="10" height="10" viewBox="0 0 10 10"><circle cx="5" cy="5" r="5" fill="%230066ff"/></svg>') 5 5, auto;
        }
        
        /* Efecto de estela del cursor */
        .cursor-trail {
            position: fixed;
            width: 40px;
            height: 40px;
            background: radial-gradient(circle, rgba(0,102,255,0.4) 0%, rgba(0,102,255,0.1) 30%, transparent 70%);
            pointer-events: none;
            z-index: 9999;
            transform: translate(-50%, -50%);
            border-radius: 50%;
            transition: opacity 0.2s ease;
            opacity: 0;
        }
        
        body {
            font-family: 'Inter', sans-serif;
            background-color: #0a0a14;
            color: #e0e0e0;
            overflow-x: hidden;
            min-height: 100vh;
        }
        
        .code-font {
            font-family: 'Fira Code', monospace;
        }
        
        .animated-bg {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            background: linear-gradient(135deg, #000000 0%, #0a0a1a 50%, #000814 100%);
            overflow: hidden;
        }
        
        .animated-bg::before {
            content: "";
            position: absolute;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 25% 25%, rgba(0, 60, 180, 0.2) 0%, transparent 30%),
                radial-gradient(circle at 75% 75%, rgba(0, 100, 255, 0.15) 0%, transparent 35%),
                radial-gradient(circle at 50% 10%, rgba(0, 80, 200, 0.1) 0%, transparent 25%);
            animation: pulse 20s infinite alternate;
        }
        
        .animated-bg::after {
            content: "";
            position: absolute;
            width: 200%;
            height: 200%;
            top: -50%;
            left: -50%;
            background-image: 
                linear-gradient(rgba(0, 100, 255, 0.08) 1px, transparent 1px),
                linear-gradient(90deg, rgba(0, 100, 255, 0.08) 1px, transparent 1px);
            background-size: 30px 30px;
            animation: move 80s linear infinite;
            opacity: 0.4;
        }
        
        @keyframes pulse {
            0% { opacity: 0.6; }
            100% { opacity: 1; }
        }
        
        @keyframes move {
            0% { transform: translate(0, 0) rotate(0deg); }
            100% { transform: translate(30px, 30px) rotate(360deg); }
        }

        /* Header Styles */
        .header {
            backdrop-filter: blur(10px);
            background: rgba(10, 10, 20, 0.3);
            border-bottom: 1px solid rgba(0, 100, 255, 0.2);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header::before {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 2px;
            background: linear-gradient(90deg, transparent, #0066ff, transparent);
            animation: shimmer 3s infinite;
        }

        @keyframes shimmer {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }

        /* Blog Card Styles */
        .blog-card {
            backdrop-filter: blur(10px);
            background: rgba(10, 10, 20, 0.3);
            border: 1px solid rgba(0, 100, 255, 0.2);
            border-radius: 16px;
            transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            overflow: hidden;
            position: relative;
            cursor: pointer;
        }

        .blog-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(0, 100, 255, 0.05), transparent);
            transition: left 0.5s ease;
            z-index: 1;
        }

        .blog-card:hover::before {
            left: 100%;
        }

        .blog-card:hover {
            transform: translateY(-8px) scale(1.02);
            border-color: #0066ff;
            box-shadow: 0 20px 40px rgba(0, 100, 255, 0.2);
        }

        .blog-card img {
            transition: transform 0.3s ease;
        }

        .blog-card:hover img {
            transform: scale(1.05);
        }

        /* Difficulty badges */
        .difficulty-easy { 
            background: linear-gradient(45deg, #00ff88, #00cc66);
            color: #000;
        }
        
        .difficulty-medium { 
            background: linear-gradient(45deg, #ffaa00, #ff8800);
            color: #000;
        }
        
        .difficulty-hard { 
            background: linear-gradient(45deg, #ff4444, #cc2222);
            color: #fff;
        }
        
        .difficulty-insane { 
            background: linear-gradient(45deg, #aa00ff, #8800cc);
            color: #fff;
        }

        /* OS badges */
        .os-linux {
            background: linear-gradient(45deg, #fcc419, #fab005);
            color: #000;
        }

        .os-windows {
            background: linear-gradient(45deg, #0066ff, #0052cc);
            color: #fff;
        }

        /* Modal styles */
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            z-index: 1000;
            display: none;
            backdrop-filter: blur(10px);
        }

        .modal-content {
            background: rgba(10, 10, 20, 0.95);
            border: 1px solid rgba(0, 100, 255, 0.3);
            border-radius: 16px;
            margin: 2% auto;
            padding: 2rem;
            width: 90%;
            max-width: 900px;
            max-height: 90vh;
            overflow-y: auto;
            position: relative;
        }

        .modal-content::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, transparent, #0066ff, transparent);
            animation: shimmer 3s infinite;
        }

        .close-modal {
            position: absolute;
            top: 1rem;
            right: 1.5rem;
            font-size: 2rem;
            color: #0066ff;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .close-modal:hover {
            color: #00ccff;
            transform: scale(1.2);
        }

        /* Markdown content styles */
        .markdown-content h1, .markdown-content h2, .markdown-content h3 {
            color: #0066ff;
            margin-top: 2rem;
            margin-bottom: 1rem;
        }

        .markdown-content h1 {
            font-size: 2.5rem;
            border-bottom: 2px solid rgba(0, 100, 255, 0.3);
            padding-bottom: 0.5rem;
        }

        .markdown-content h2 {
            font-size: 2rem;
        }

        .markdown-content h3 {
            font-size: 1.5rem;
        }

        .markdown-content code {
            background: rgba(0, 100, 255, 0.1);
            color: #00ccff;
            padding: 0.2rem 0.4rem;
            border-radius: 4px;
            font-family: 'Fira Code', monospace;
        }

        .markdown-content pre {
            background: rgba(0, 0, 0, 0.5);
            border: 1px solid rgba(0, 100, 255, 0.2);
            border-radius: 8px;
            padding: 1rem;
            overflow-x: auto;
            margin: 1rem 0;
        }

        .markdown-content pre code {
            background: none;
            padding: 0;
        }

        .markdown-content blockquote {
            border-left: 4px solid #0066ff;
            margin-left: 0;
            padding-left: 1rem;
            font-style: italic;
            opacity: 0.8;
        }

        .markdown-content img {
            max-width: 100%;
            border-radius: 8px;
            margin: 1rem 0;
        }

        .markdown-content ul, .markdown-content ol {
            padding-left: 2rem;
            margin: 1rem 0;
        }

        .markdown-content li {
            margin: 0.5rem 0;
        }

        a, button, .blog-card, input {
            cursor: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="10" height="10" viewBox="0 0 10 10"><circle cx="5" cy="5" r="5" fill="%230066ff"/></svg>') 5 5, auto !important;
        }
    </style>
</head>
<body>
    <div class="animated-bg"></div>
    <div class="cursor-trail" id="cursorTrail"></div>
    
    <!-- Header -->
    <header class="header">
        <div class="container mx-auto px-6 py-4">
            <div class="flex items-center justify-between">
                <h1 class="code-font text-2xl font-bold text-white">vr0px<span class="text-blue-500">.blog</span></h1>
                <nav>
                    <a href="../" class="text-blue-400 hover:text-blue-300 transition-colors">← Back to Home</a>
                </nav>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main class="container mx-auto px-6 py-8">
        <div class="text-center mb-12">
            <h2 class="text-4xl font-bold mb-4 bg-gradient-to-r from-blue-400 to-cyan-400 bg-clip-text text-transparent">
                Blog Posts
            </h2>
            <p class="text-xl text-gray-300">Pentesting writeups and cybersecurity insights</p>
        </div>

        <!-- Blog Posts Grid -->
        <div id="postsContainer" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            <!-- Posts will be loaded here -->
        </div>

        <!-- Loading indicator -->
        <div id="loading" class="text-center py-12">
            <div class="inline-flex items-center px-6 py-3 text-blue-400">
                <svg class="animate-spin -ml-1 mr-3 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Loading posts...
            </div>
        </div>
    </main>

    <!-- Modal for post content -->
    <div id="postModal" class="modal">
        <div class="modal-content">
            <span class="close-modal" onclick="closeModal()">&times;</span>
            <div id="modalContent" class="markdown-content">
                <!-- Post content will be loaded here -->
            </div>
        </div>
    </div>

    <script>
        // Cursor trail effect
        const cursorTrail = document.getElementById('cursorTrail');
        
        document.addEventListener('mousemove', function(e) {
            e.preventDefault();
            const x = e.clientX;
            const y = e.clientY;
            
            cursorTrail.style.left = x + 'px';
            cursorTrail.style.top = y + 'px';
            cursorTrail.style.opacity = '1';
        });

        document.addEventListener('mouseleave', function() {
            cursorTrail.style.opacity = '0';
        });

        // Particles effect
        function createParticle() {
            const particle = document.createElement('div');
            particle.style.cssText = `
                position: fixed;
                width: 2px;
                height: 2px;
                background: #0066ff;
                border-radius: 50%;
                pointer-events: none;
                z-index: 1;
                left: ${Math.random() * window.innerWidth}px;
                top: ${window.innerHeight + 10}px;
                opacity: ${Math.random() * 0.5 + 0.2};
            `;
            
            document.body.appendChild(particle);
            
            const duration = Math.random() * 3000 + 2000;
            particle.animate([
                { transform: 'translateY(0px)', opacity: particle.style.opacity },
                { transform: `translateY(-${window.innerHeight + 100}px)`, opacity: 0 }
            ], {
                duration: duration,
                easing: 'linear'
            }).addEventListener('finish', () => particle.remove());
        }

        setInterval(createParticle, 500);

        // Blog functionality
        let posts = [];

        // Sample posts data (replace with actual file reading)
        const samplePosts = [
            {
                filename: '2023-03-21-inject-hackthebox-writeup.md',
                frontmatter: {
                    title: 'Inject Machine WriteUp',
                    author: 'Vr0px',
                    date: '2023-03-21 00:00:00 +0800',
                    OS: 'Linux',
                    Difficulty: 'easy',
                    categories: ['hackthebox', 'machine', 'writeup'],
                    tags: ['linux', 'hackthebox', 'writeup', 'easy'],
                    image: { path: '../../images/copy-alt.png', alt: 'Inject WriteUp' },
                    pin: false
                },
                content: `# Inject Machine WriteUp

This is a sample writeup for the Inject machine from HackTheBox.

## Reconnaissance

Starting with nmap scan:

\`\`\`bash
nmap -sC -sV 10.10.11.204
\`\`\`

## Exploitation

Found a vulnerable service...

## Privilege Escalation

Using a kernel exploit...

## Conclusion

This was an easy machine focusing on web exploitation and basic privilege escalation.`
            },
            {
                filename: '2023-04-15-windows-priv-esc.md',
                frontmatter: {
                    title: 'UnderPass WriteUp',
                    author: 'Vr0px',
                    date: '2023-04-15 00:00:00 +0800',
                    OS: 'Windows',
                    Difficulty: 'medium',
                    categories: ['pentesting', 'windows', 'privilege-escalation'],
                    tags: ['windows', 'privesc', 'pentesting'],
                    image: { path: 'img/UnderPass.png', alt: 'Windows PrivEsc' },
                    pin: false
                },
                content: `# Windows Privilege Escalation Techniques

A comprehensive guide to Windows privilege escalation.

## Common Techniques

### Service Misconfigurations
- Unquoted service paths
- Weak service permissions

### Registry Issues
- AlwaysInstallElevated
- Autorun programs

## Tools
- WinPEAS
- PowerUp
- Seatbelt`
            },
            {
                filename: '2023-05-10-buffer-overflow-guide.md',
                frontmatter: {
                    title: 'Chiper WriteUp',
                    author: 'Vr0px',
                    date: '2023-05-10 00:00:00 +0800',
                    OS: 'Linux',
                    Difficulty: 'hard',
                    categories: ['exploitation', 'binary', 'pwn'],
                    tags: ['buffer-overflow', 'exploitation', 'binary'],
                    image: { path: 'img/Cypher.png', alt: 'Buffer Overflow' },
                    pin: true
                },
                content: `# Buffer Overflow Exploitation Guide

Learn how to exploit buffer overflows step by step.

## Prerequisites
- Basic assembly knowledge
- Understanding of memory layout
- GDB usage

## The Process
1. Fuzzing
2. Controlling EIP
3. Finding bad characters
4. Finding return address
5. Generating shellcode
6. Getting shell`
            }
        ];

        function parseFrontmatter(content) {
            const frontmatterRegex = /^---\s*\n([\s\S]*?)\n---\s*\n([\s\S]*)$/;
            const match = content.match(frontmatterRegex);
            
            if (!match) return null;
            
            const frontmatterText = match[1];
            const mainContent = match[2];
            
            const frontmatter = {};
            frontmatterText.split('\n').forEach(line => {
                const colonIndex = line.indexOf(':');
                if (colonIndex > -1) {
                    const key = line.substring(0, colonIndex).trim();
                    let value = line.substring(colonIndex + 1).trim();
                    
                    // Parse different value types
                    if (value.startsWith('[') && value.endsWith(']')) {
                        value = value.slice(1, -1).split(',').map(s => s.trim());
                    } else if (key === 'image') {
                        // Handle image object
                        frontmatter.image = { path: value };
                    } else if (key === 'path' && frontmatter.image) {
                        frontmatter.image.path = value;
                    } else if (key === 'alt' && frontmatter.image) {
                        frontmatter.image.alt = value;
                    } else if (value === 'true') {
                        value = true;
                    } else if (value === 'false') {
                        value = false;
                    }
                    
                    if (key !== 'path' && key !== 'alt') {
                        frontmatter[key] = value;
                    }
                }
            });
            
            return { frontmatter, content: mainContent };
        }

        function getDifficultyClass(difficulty) {
            return `difficulty-${difficulty.toLowerCase()}`;
        }

        function getOSClass(os) {
            return `os-${os.toLowerCase()}`;
        }

        function createPostCard(post) {
            const { frontmatter } = post;
            const difficultyClass = getDifficultyClass(frontmatter.Difficulty);
            const osClass = getOSClass(frontmatter.OS);
            
            return `
                <div class="blog-card" onclick="openPost('${post.filename}')">
                    <div class="relative">
                        <img src="${frontmatter.image?.path || 'img/default.png'}" 
                             alt="${frontmatter.image?.alt || frontmatter.title}" 
                             class="w-full h-48 object-cover">
                        <div class="absolute top-4 right-4 flex gap-2">
                            <span class="px-2 py-1 rounded-full text-xs font-bold ${osClass}">
                                ${frontmatter.OS}
                            </span>
                            <span class="px-2 py-1 rounded-full text-xs font-bold ${difficultyClass}">
                                ${frontmatter.Difficulty.toUpperCase()}
                            </span>
                        </div>
                    </div>
                    <div class="p-6 relative z-10">
                        <h3 class="text-xl font-bold mb-2 text-white">${frontmatter.title}</h3>
                        <p class="text-gray-400 text-sm mb-4">${frontmatter.date.split(' ')[0]}</p>
                        <div class="flex flex-wrap gap-2">
                            ${frontmatter.tags?.slice(0, 3).map(tag => 
                                `<span class="px-2 py-1 bg-blue-500/20 text-blue-300 rounded-full text-xs">#${tag}</span>`
                            ).join('') || ''}
                        </div>
                    </div>
                </div>
            `;
        }

        function loadPosts() {
            // In a real implementation, you would fetch files from the posts/ directory
            // For this demo, we're using sample data
            posts = samplePosts;
            
            const postsContainer = document.getElementById('postsContainer');
            const loading = document.getElementById('loading');
            
            // Simulate loading delay
            setTimeout(() => {
                loading.style.display = 'none';
                
                if (posts.length === 0) {
                    postsContainer.innerHTML = `
                        <div class="col-span-full text-center py-12">
                            <p class="text-gray-400 text-xl">No posts found</p>
                        </div>
                    `;
                    return;
                }

                // Sort posts by pin status and date
                posts.sort((a, b) => {
                    if (a.frontmatter.pin && !b.frontmatter.pin) return -1;
                    if (!a.frontmatter.pin && b.frontmatter.pin) return 1;
                    return new Date(b.frontmatter.date) - new Date(a.frontmatter.date);
                });

                postsContainer.innerHTML = posts.map(createPostCard).join('');
            }, 1000);
        }

        function openPost(filename) {
            const post = posts.find(p => p.filename === filename);
            if (!post) return;

            const modal = document.getElementById('postModal');
            const modalContent = document.getElementById('modalContent');
            
            // Convert markdown to HTML
            const htmlContent = marked.parse(post.content);
            
            modalContent.innerHTML = `
                <div class="mb-6">
                    <h1 class="text-3xl font-bold mb-4">${post.frontmatter.title}</h1>
                    <div class="flex items-center gap-4 text-sm text-gray-400 mb-4">
                        <span>By ${post.frontmatter.author}</span>
                        <span>${post.frontmatter.date.split(' ')[0]}</span>
                        <span class="px-2 py-1 rounded ${getOSClass(post.frontmatter.OS)}">${post.frontmatter.OS}</span>
                        <span class="px-2 py-1 rounded ${getDifficultyClass(post.frontmatter.Difficulty)}">${post.frontmatter.Difficulty.toUpperCase()}</span>
                    </div>
                </div>
                ${htmlContent}
            `;
            
            modal.style.display = 'block';
            document.body.style.overflow = 'hidden';
        }

        function closeModal() {
            const modal = document.getElementById('postModal');
            modal.style.display = 'none';
            document.body.style.overflow = 'auto';
        }

        // Close modal when clicking outside
        document.getElementById('postModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeModal();
            }
        });

        // Close modal with Escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeModal();
            }
        });

        // Load posts when page loads
        document.addEventListener('DOMContentLoaded', loadPosts);

        // Block right-click context menu
        document.addEventListener('contextmenu', function(e) {
            e.preventDefault();
        });
    </script>
</body>
</html>